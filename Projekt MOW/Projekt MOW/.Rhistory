rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
5+5
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R", encoding = "windows-1250")
library("GA", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
cec
cec2013(8,10)
cec2013(2,10)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
f <- function(x) abs(x) + cos(x) curve(f, -20, 20) fitness <- function(x) - f(x) GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20) summary(GA) plot(GA)
f <- function(x) cos(x) curve(f, -20, 20) fitness <- function(x) - f(x) GA <- ga(type = "real-valued", fitness = fitness, min = -20, max = 20) summary(GA) plot(GA)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
install.packages("doRNG", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
 ga(type = "real-valued", fitness = fx, min = -100, max = 100)
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
library("GA", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(GA)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(GA30)
plot(GA10)
plot(GA10)
plot(GA50)
Summary(GA10)
summary(GA10)
summary(GA30)
summary(GA30)
summary(GA50)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
summary(GA10)
summary(GA30) 
summary(GA50)
plot(GA50)
plot(GA30)
plot(GA10)
library("ggplot2", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
ggplot(GA10, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
library(ggplot2)
ggplot(GA10, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
GA10 <- ga(type = "real-valued", fitness = fx, min = rep(-100,2), max = rep(100,2), popSize = 100, seed = 1234, monitor = NULL, maxiter = 20)
ggplot(GA10, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
ggplot(GA10, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(as.matrix(GA10), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
GA10
ggplot(as.vector(GA10), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
ggplot(as.vector(GA10), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
library(ggplot2)
library(ggplot2)
ggplot(as.vector(GA10), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
library("GA", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
ggplot(as.vector(data.class(GA10)), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(as.vector(data.matrix(GA10)), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(as.vector(data.entry(GA10)), aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
summary(GA10)
plot(GA$population)
plot(GA10$population)
plot(GA10$bestSol)
GA10$bestSol
GA10$iter
GA10$max
dim(GA10)
dim(GA10)
GA10$summary
iter(GA10)
outer(GA10)
list(GA10)
data10= data.frame(wektor=GA10)
install.packages("benchmark", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("benchmark", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
out <- benchmark(GA10,GA30,GA50) out$average <- with(out, average <- elapsed / replications) out[, c(1:3, 5, 4)]
out <- benchmark(GA10,GA30,GA50)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
out <- benchmark(     GA10 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 10), max = rep(100, 10), popSize = 100, seed = 1234, monitor = NULL, maxiter = 20), GA30 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 30), max = rep(100, 30), popSize = 300, seed = 1234, monitor = NULL, maxiter = 30), GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 40), columns = c("test", "replications", "elapsed", "relative"),                  order = "test",                  replications = 10) )
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
install.packages("rbenchmark", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
unloadNamespace("benchmark")
library("rbenchmark", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
GA.lastpop = tail(GA.data,100)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
library("GA", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
GA@solution
GA@solution
GA10.lastpop = tail(GA10.data,100)
GA10@population
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
library("GA", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
kmeans(GA10@population,3,iter.max = 10,nstart = 10)
kmeans(GA10@population, 5, iter.max = 10, nstart = 10)
kmeans(GA10@population, 5, iter.max = 100, nstart = 10)
kmeans(GA10@population, 5, iter.max = 10, nstart = 20)
kmeans(GA10@population, 5, iter.max = 10, nstart = 20)
kmeans(GA10@population, 10, iter.max = 10, nstart = 20)
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
hclust(GA10@population, method = "complete", members = NULL)
hclust(GA10@population, method = "complete", members = TRUE)
hclust(GA10@population, method = "complete")
hclust(dist(cent) ^ 2, method = "complete", members = GA10@population)
hclust(dist(GA10) ^ 2, method = "complete", members = GA10@population)
hclust(dist(GA10@population), method = "complete")
plot(hclust(dist(GA10@population), method = "complete"))
plot(hclust(dist(GA10@population), method = "average"))
plot(hclust(dist(GA10@population), method = "single"))
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(hclust(dist(GA10@population), method = "single"))
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(hclust(dist(GA10@population), method = "single"))
source("C:\\Users\\konra\\Source\\Repos\\MOW-AE\\Projekt MOW\\Projekt MOW\\script.R")
source("C:\\Users\\konra\\Source\\Repos\\MOW-AE\\Projekt MOW\\Projekt MOW\\script.R")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(hclust(dist(GA10@population), method = "single"))
2+2
2+2
library("GA", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cec2013", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("doRNG", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("cluster", lib.loc="C:/Program Files/Microsoft/MRO-3.3.2/library")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(hclust(dist(GA10@population), method = "complete"))
plot(GA10)
GA10 <- ga(type = "real-valued", A10 <- ga(type = "real-valued",      fitness = fx,       min = rep(-100, 10),        max = rep(100, 10),        popSize = 100,         seed = 1234, monitor = NULL, maxiter = 20) GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 20)
GA7 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 20)
plot(GA7)
plot(GA10)
fx1 <- function(x) { return(cec2013(7, x))}
GA6 <- ga(type = "real-valued",fitness = fx1, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 20)
plot(GA6)
GA6 <- ga(type = "real-valued",fitness = fx1, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 500)
plot(GA6)
plot(GA6)
plot(GA6)
if (!"GA" %in% row.names(installed.packages()))     install.packages("GA") # załadowanie tego pakietu library(GA)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(GA10)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 5000,pmutation = 0.2)
plot(GA10)
plot(GA10)
GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 500,pmutation = 0.5)
plot(GA10)
GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 500,pmutation = 0.5,mutation = "gareal_raMutation")
plot(GA10)
GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 50,pmutation = 0.5) GA30 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 30), max = rep(100, 30), popSize = 300, seed = 1234, monitor = NULL, maxiter = 30, pmutation = 0.5) GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 40, pmutation = 0.5)
plot(GA10)
plot(GA30)
plot(GA50)
GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 100,pmutation = 0.5) GA30 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 30), max = rep(100, 30), popSize = 300, seed = 1234, monitor = NULL, maxiter = 300, pmutation = 0.5) GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 500, pmutation = 0.5)
plot(GA10)
plot(GA30)
plot(GA50)
kmeans(GA10@population, 3, iter.max = 10, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt 
plot(kmeans(GA10@population, 3, iter.max = 10, nstart = 10)) #klastry 3, iter 10, poczatkow 10 pkt 
kmeans(GA10@population, 3, iter.max = 10, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt 
kmeans(GA10@population, 4, iter.max = 100, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt 
kmeans(GA10@population, 5, iter.max = 100, nstart = 10)
kmeans(GA10@population, 10, iter.max = 10, nstart = 20)
km4<-kmeans(GA10@population, 4, iter.max = 100, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt 
GA10.km4<-kmeans(GA10@population, 4, iter.max = 100, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt 
GA10.km4<-kmeans(GA10@population, 3, iter.max = 100, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt  GA10.km5 <- kmeans(GA10@population, 6, iter.max = 100, nstart = 10) GA10.km10 <- kmeans(GA10@population, 10, iter.max = 10, nstart = 20) GA30.km4 <- kmeans(GA30@population, 3, iter.max = 100, nstart = 10)   GA30.km5 <- kmeans(GA30@population, 6, iter.max = 100, nstart = 10) GA30.km10 <- kmeans(GA30@population, 10, iter.max = 10, nstart = 20) GA50.km4 <- kmeans(GA50@population, 3, iter.max = 100, nstart = 10)  GA50.km5 <- kmeans(GA50@population, 6, iter.max = 100, nstart = 10) GA50.km10 <- kmeans(GA50@population, 10, iter.max = 10, nstart = 20)
GA50.km10
GA10.kmed <- pam(GA10, 3, medoids = true)
GA10.kmed <- pam(GA10, 3)
GA10.kmed <- pam(GA10@population, 3, medoids = true)
GA10.kmed <- pam(GA10@population, 3, medoids = 10)
GA10.kmed <- pam(GA10@population, 3, medoids = rep(0, 10))
GA10.kmed <- pam(GA10@population, 3, medoids = rep(0, 100))
GA10.kmed <- pam(GA10@population, 3, medoids ={1,2,3}))
GA10.kmed <- pam(GA10@population, 3, medoids = c(1, 16)))
GA10.kmed <- pam(GA10@population, 3, medoids = c(1, 16))
GA10.kmed <- pam(GA10@population, 2, medoids = c(1, 16))
GA10.kmed <- pam(GA10@population, 3, medoids = c(1, 2,3))
GA10.kmed <- pam(GA10@population, 3, medoids = 3:1)
GA50.kmed10 <- pam(GA50@population, 10, medoids = 10:1)
agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "avarage");
agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "avarage")
agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "average")
agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "single")
complete
agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "completed")
agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "complete")
plot(GA10.agn.cmpl)
GA10.agn.cmpl <- agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "complete")
plot(GA10.agn.cmpl)
GA10.agn.ave <- agnes(GA10@population, diss = FALSE, metric = "flexible", method = "average")
plot(GA10.agn.cmpl)
plot(GA10.agn.ave)
GA10.agn.ave <- agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "flexible")
install.packages("dbscan", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("dbscan", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
dbscan(GA10@population,eps = 0.15,minPts = 10)
dbscan(GA10@population,eps = 0.5,minPts = 10)
dbscan(GA10@population,eps = 5,minPts = 10)
dbscan(GA10@population,eps = 50,minPts = 10)
dbscan(GA10@population,eps = 80,minPts = 10)
dbscan(GA10@population,eps = 50,minPts = 50)
dbscan(GA10@population,eps = 50,minPts = 5)
dbscan(GA10@population,eps = 50,minPts = 2)
dbscan(GA10@population,eps = 60,minPts = 2)
dbscan(GA10@population,eps = 80,minPts = 2)
dbscan(GA10@population,eps = 70,minPts = 2)
dbscan(GA10@population,eps = 65,minPts = 2)
dbscan(GA10@population,eps = 63,minPts = 2)
dbscan(GA10@population,eps = 68,minPts = 2)
dbscan(GA10@population,eps = 67,minPts = 2)
dbscan(GA10@population,eps = 65,minPts = 2)
dbscan(GA10@population,eps = 65,minPts = 3)
dbscan(GA10@population,eps = 65,minPts = 1)
dbscan(GA10@population,eps = 65,minPts = 2.5)
dbscan(GA10@population,eps = 65,minPts = 5)
dbscan(GA10@population,eps = 65,minPts = 2)
dbscan(GA10@population,eps = 80,minPts = )
dbscan(GA10@population,eps = 70,minPts = )
dbscan(GA10@population,eps = 70,minPts = 5)
db <- dbscan(GA10@population, eps = 70, minPts = 5)
data("multishapes",package = "factoextra")
install.packages("factoextra", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
plot(db, GA10, main = "dbsan", frame = false)
plot(db, GA10@population, main = "dbsan", frame = false)
plot(db, GA10@popSize, main = "dbsan", frame = false)
plot(db, GA10@population, main = "dbsan", frame = false)
print(db)
plot(GA10@population)
plot(db, GA10@population[,2], main = "dbsan", frame = false)
plot(db, GA10@population[,1:2], main = "dbsan", frame = false)
plot(db, GA10@population[,2], main = "dbsan", frame = false)
plot(GA10@population)
plot(GA10@population)
db <- dbscan(GA10@population, eps = 10, minPts = 5)
print(db)
db <- dbscan(GA10@population, eps = 10, minPts = 10)
db <- dbscan(GA10@population, eps = 10, minPts = 80)
print(db)
db <- dbscan(GA10@population, eps = 20, minPts = 5)
print(db)
plot(GA10@population)
db <- dbscan(GA10@population, eps = 50, minPts = 5)
print(db)
plot(db, GA10@population[,2], main = "dbsan", frame = false)
db@cluster
print(db)
print(db)
plot(GA10@population)
plot(db)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts = 15)
db <- dbscan(GA10@population, eps = 50, minPts = 15)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts = 1)
print(db)
db <- dbscan(GA10@population, eps = 40, minPts = 15)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts = 2)
db <- dbscan(GA10@population, eps = 50, minPts = 2)
print(db)
plot(GA10@population)
plot(GA10@population)
db <- dbscan(GA10@population, eps = 40, minPts = 2)
print(db)
db <- dbscan(GA10@population, eps = 10, minPts = 2)
print(db)
db <- dbscan(GA10@population, eps = 10, minPts = 20)
print(db)
db <- dbscan(GA10@population, eps = 40, minPts =15)
print(db)
install.packages("factoextra", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("factoextra", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
data("multishapes", package = "factoextra")
df <- multishapes[, 1:2]
GA10@population <- multishapes[, 1:2]
GA10 <- multishapes[, 1:2]
plot(db, GA10@population[,2], main = "dbsan", frame = false)
GA10 <- multishapes[, 1:2]
db <- dbscan(GA10@population, eps = 40, minPts =15)
data("multishapes", package = "factoextra")
GA10 <- multishapes[, 1:2]
db <- dbscan(GA10@population, eps = 40, minPts =15)
db <- dbscan(GA10, eps = 40, minPts =15)
plot(db, GA10[,1:2], main = "dbsan", frame = false)
data("multishapes", package = "factoextra")
GA10 <- multishapes[, 1:2]
db <- dbscan(GA10, eps = 40, minPts =15)
plot(db, GA10, main = "dbsan", frame = false)
plot(db, GA10@population, main = "dbsan", frame = false)
plot(db, GA10, main = "dbsan", frame = false)
data("multishapes", package = "factoextra")
GA10 <- multishapes[, 1:2]
db <- dbscan(GA10, eps = 40, minPts =15)
plot(db, GA10, main = "dbsan", frame = false)
plot(db, GA10@y, main = "dbsan", frame = false)
plot(db, GA10@x, main = "dbsan", frame = false)
plot(db, GA10@.Data, main = "dbsan", frame = false)
plot(db, GA10.Data, main = "dbsan", frame = false)
plot(db, GA10@ main = "dbsan", frame = false)
plot(db, GA10@.S3Class main = "dbsan", frame = false)
plot(db, GA10@.S3Class, main = "dbsan", frame = false)
GA10 <- ga(type = "real-valued",fitness = fx, min = rep(-100, 10),  max = rep(100, 10),  popSize = 100,   seed = 1234, monitor = NULL, maxiter = 100,pmutation = 0.5)
db <- dbscan(GA10@population, eps = 40, minPts =15)
print(db)
db <- dbscan(GA10@population[,1:2], eps = 40, minPts =15)
plot(db,GA10@population , main = "dbsan", frame = false)
db <- dbscan(GA10@population[,1:2], eps = 40, minPts =15)
plot(db,GA10@population , main = "dbsan", frame = false)
print(db)
db <- dbscan(GA10@population, eps = 40, minPts =15)
print(db)
db <- dbscan(GA10@population[,2], eps = 40, minPts =15)
plot(GA10@population)
db <- dbscan(GA10@population[1,2], eps = 40, minPts =15)
db <- dbscan(GA10@population[,1:3], eps = 40, minPts =15)
print(db)
print(db)
plot(GA10@population)
1:3
plot(GA10@population[, 1:3])
summary(GA10@population[, 1:3])
summary(GA10@population)
summary(GA10@population[, 1:3])
summary(GA10@population[, c(1,16)])
summary(GA10@population[, c(1,8)])
db <- dbscan(GA10@population[,1:10], eps = 40, minPts =15)
print(db)
db <- dbscan(GA10@population[,1:3], eps = 40, minPts =15)
print(db)
summary(GA10@population[, 1:5])
summary(GA10@population[, 1:100])
summary(GA10@population[, 1:10])
summary(GA10@population[, 1:11])
summary(GA10@population[, 1:3])
summary(GA10@population[1, 1:3])
summary(GA10@population[1:101, 1:3])
summary(GA10@population[1:100, 1:3])
summary(GA10@population)
db <- dbscan(GA10@population, eps = 40, minPts =15)
print(db)
db <- dbscan(GA10@population, eps = 40, minPts =25)
print(db)
db <- dbscan(GA10@population, eps = 20, minPts =25)
print(db)
db <- dbscan(GA10@population, eps = 10, minPts =25)
print(db)
db <- dbscan(GA10@population, eps = 45, minPts =15)
print(db)
db <- dbscan(GA10@population, eps = 47, minPts =15)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts =15)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts =10)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts =8)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts =7)
print(db)
db <- dbscan(GA10@population, eps = 50, minPts =6)
print(db)
db <- dbscan(GA10@population, eps = 55, minPts =6)
print(db)
db <- dbscan(GA10@population, eps = 60, minPts =6)
print(db)
db <- dbscan(GA10@population, eps = 60, minPts =7)
print(db)
db <- dbscan(GA10@population, eps = 60, minPts =5)
print(db)
db <- dbscan(GA10@population, eps = 20, minPts =5)
print(db)
db <- dbscan(GA10@population, eps = 70, minPts =5)
print(db)
print(db)
plot(GA10@population[,2])
plot(GA10@population[,1])
plot(GA10@population[,10])
plot(GA10@population[1,])
plot(GA10@population[1,5])
plot(GA10@population[1,])
plot(GA10@population[10,])
plot(GA10@population[1:10,])
plot(GA10@population[1:5,])
plot(GA10@population[,])
db <- dbscan(GA10@population[,], eps = 70, minPts =5)
print(db)
plot(GA10@population[,])
Summary(GA10@population)
Summary(GA10)
summary(GA10)
GA10
plot(GA10@population[,])
summary(GA10)
summary(GA10[,])
summary(GA10@population[,])
plot(GA10@population[1:100,])
summary(GA10@population[1:100,])
summary(GA10@population[1:100,1:10])
plot(GA10@population[,])
GA10@po
GA10@pop
GA10@population
GA10@population[1:100,> GA10@population[1:100,]]
GA10@population[1:100,]
summary(GA10@population[1:100,])
summary(GA10@population[,1:10])
summary(GA10@population[,1:100])
summary(GA10@population[1:10,])
summary(GA10@population[10:20,])
summary(GA10@population[1:5,])
summary(GA10@population[1,10])
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
GA10.agn.cmpl <- agnes(GA50@population, diss = FALSE, metric = "euclidean", method = "complete")
plot(GA10.agn.cmpl)
GA30.db <- dbscan(GA30@population, eps = 70, minPts = 5)
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
plot(GA50@population)
plot(GA30@population)
plot(GA10@population)
plot(GA10@population)
plot(GA50@population)
plot(GA10.db)
sizeDiss(ga10.db)
sizeDiss(GA10.db)
plot(GA10.db)
GA10.db
GA30.db
GA50.db
plot(GA50.db, GA10@population[,1:2], main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA10@population[1:2,1:2], main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA10@population[1,1:2], main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA10@population[1,1], main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA10@population[1:2,1], main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA10@population[1:2,1:2], main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA10@population[1,1:2], main = "DBSCAN", frame = FALSE)
GA50.db
plot(GA50.db, 1:2, main = "DBSCAN", frame = FALSE)
plot(GA50.db, 1:500, main = "DBSCAN", frame = FALSE)
xy.coords(GA50.db)
x.coords(GA50.db)
coords(GA50.db)
y.coords(GA50.db)
xy.coords(GA50.db)
plot(GA50.db, 1:100, main = "DBSCAN", frame = FALSE)
plot(GA50.db, 1:500, main = "DBSCAN", frame = FALSE)
plot(GA50.db, 1:50, main = "DBSCAN", frame = FALSE)
sizeDiss(GA50.db)
plot(GA50.db, GA10@population[,], main = "DBSCAN", frame = FALSE)
GA50.db <- fpc::dbscan(GA50@population, eps = 70, minPts = 5)
GA50.db <- fpc::dbscan(GA50@population, eps = 70, MinPts = 5)
plot(GA50.db, GA10@population[,], main = "DBSCAN", frame = FALSE)
GA30.db <- dbscan(GA30@population, eps = 70, MinPts = 5)
GA50.db
plot(GA50.db, GA50@population[,], main = "DBSCAN", frame = FALSE)
plot(GA30.db, GA30@population[,], main = "DBSCAN", frame = FALSE)
GA10.db <- fpc::dbscan(GA10@population, eps = 70, MinPts = 5)
GA30.db <- fpc::dbscan(GA30@population, eps = 70, MinPts = 5)
GA50.db <- fpc::dbscan(GA50@population, eps = 70, MinPts = 5)
plot(GA30.db, GA30@population[,], main = "DBSCAN", frame = FALSE)
plot(GA30.db, GA30@population, main = "DBSCAN", frame = FALSE)
plot(GA10.db, GA10@population, main = "DBSCAN", frame = FALSE)
plot(GA30.db, GA30@population, main = "DBSCAN", frame = TRUE)
plot(GA50.db, GA50@population, main = "DBSCAN", frame = FALSE)
plot(GA50.db, GA50@population, main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population, main = "DBSCAN", frame = TRUE)
ga
plot(GA10.db, GA10@population, main = "DBSCAN", frame = TRUE)
GA50.db
GA10.DB
GA10.db
write.table(GA10.db)
write.table(GA10)
write.table(GA10@population)
write.table(GA10@population,file = "GA10population")
GA10.data <- data.frame(    emp_id = c(1:10),    emp_name = c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"),    stringsAsFactors = FALSE )
print(emp.data)
print(GA10.data)
GA10.data <- data.frame(   data(GA10@population),   label(GA10@population[,1])<-"V1",    stringsAsFactors = FALSE )
GA10.data <- data.frame(   data(GA10@population),    stringsAsFactors = FALSE )
GA10.data <- data.frame(GA10@population,    stringsAsFactors = FALSE )
print(GA10.data)
GA10.data <- data.frame(GA10@population,  stringsAsFactors = TRUE)
print(GA10.data)
GA10.data <- data.frame(GA10@population,  stringsAsFactors = TRUE,options(digits=2))
print(GA10.data)
GA10.data <- data.frame(GA10@population,  stringsAsFactors = TRUE,digits=2)
print(GA10.data)
write.table(GA10@population, file = "GA10population", options(digits = 2))
write.table(GA10@population, file = "GA10population", digits = 2)
print(GA10.data,digits=2)
GA10.data <- data.frame(GA10@population,  stringsAsFactors = TRUE)
GA10.data <- data.frame(GA10@population,  stringsAsFactors = TRUE)
print(GA10.data,digits=2)
write.table(print(GA10.data, digits = 2), file = "GA10population",)
write.table(print(GA10.data, digits = 2), file = "GA10population1",)
print(GA10.data,digits=2)
print(GA10.data,digits=1)
print(GA10.data,digits=2)
write.table(format(GA10@population, digits = 2), file = "GA10population")
write.table(format(GA10@population, digits = 1), file = "GA10population")
write.table(format(GA10.data, digits = 1), file = "GA10population")
print(GA10.data,digits=2)
print(GA10.data,digits=2)>"kot> print(GA10.data,digits=2)>"kot""
print(GA10.data,digits=2)-> print(GA10.data,digits=2)->"kot> print(GA10.data,digits=2)>"kot"">"kot> print(GA10.data,digits=2)>"kot""
write.table(format(GA10.data, digits = 2), file = "GA10population")
write.table(format(GA10.data, digits = 2.0), file = "GA10population")
GA10.km4@centers
GA10.km3<-kmeans(GA10@population, 3, iter.max = 100, nstart = 10) #klastry 3, iter 10, poczatkow 10 pkt 
GA10.km6 <- kmeans(GA10@population, 6, iter.max = 100, nstart = 10)
GA10.km10 <- kmeans(GA10@population, 10, iter.max = 10, nstart = 20)
GA10.km4@centers
GA10.km3@centers
GA10.km3@size
summary(GA10.km3@centers)
summary(GA10.km3@cluster)
GA10.km3@centers
pritn(GA10.km3@centers)
pritnt(GA10.km3@centers)
print(GA10.km3@centers)
plot(GA10.km3, col = GA10.km3$cluster)
plot(GA10.km3, col = GA10.km3@cluster)
plot(GA10@population, col = GA10.km3@cluster)
plot(GA10@population, col = GA10.km3$cluster)
plot(GA10@population, col = GA10.km3$cluster)
GA10.km3$centers
plot(GA10.km3$centers)
plot(GA10.km3$centers)
plot(GA10@population, col = GA10.km3$cluster)
plot(GA10@population, row = GA10.km3$cluster)
row
plot(GA10@population, row = GA10.km3$cluster)
plot(GA10@population, col = GA10.km3$cluster)
plot(GA10.km3)
plot(GA10@population, col = GA10.km10$cluster)
GA10.km10 <- kmeans(GA10@population, 10, iter.max = 10, nstart = 30)
plot(GA10@population, col = GA10.km10$cluster)
GA10.km10 <- kmeans(GA10@population, 10, iter.max = 10, nstart = 3)
plot(GA10@population, col = GA10.km10$cluster)
GA10.km10 <- kmeans(GA10@population, 10, iter.max = 100, nstart = 3)
plot(GA10@population, col = GA10.km10$cluster)
GA10.km10 <- kmeans(GA10@population, 10, iter.max = 100, nstart = 30)
plot(GA10@population, col = GA10.km10$cluster)
plot(GA10@population[,], col = GA10.km10$cluster)
plot(GA10@population, col = GA10.km10$cluster)
plot(GA10.db, GA10@population, main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[,1:3], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[,1:3], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[,1:2], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[1:2], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[1:5], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[1:100], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[1:100,1:10], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[1:100,1], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[1:100,], main = "DBSCAN", frame = TRUE)
plot(GA10.db, GA10@population[,], main = "DBSCAN", frame = TRUE)
plot(GA10@population)
plot(GA10@population[,3:4])
plot(GA10@population)
plot(GA50)
plot(GA50@fitnessValue)
plot(GA50@fitnessValue)
plot(GA50@fitness)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 5, pmutation = 0.5)
plot(GA50@fitness)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 20, pmutation = 0.5)
plot(GA50@fitness)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 2, pmutation = 0.5)
plot(GA50@fitness)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 1, pmutation = 0.1)
plot(GA50@fitness)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-1000, 50), max = rep(1000, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 1, pmutation = 0.1)
plot(GA50@fitness)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-1000, 50), max = rep(1000, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 0, pmutation = 0.1)
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-1000, 50), max = rep(1000, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 2, pmutation = 0.1)
plot(GA50@fitness)
plot(GA10.db, GA10@population, main = "DBSCAN", frame = TRUE)
install.packages("bcv", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("bcv", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
unloadNamespace("bcv")
install.packages("clv", lib="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
library("clv", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
wcls.matrix(GA10.km3)
wcls.matrix(GA10.km3$cluster)
GA10.km3$betweenss
GA10.km3$cluster
GA10.km3
wcls.matrix(GA10@population)
wcls.matrix(GA10.km3)
wcls.matrix(GA10.km3$cluster)
wcls.matrix(GA10.km3$tot.withinss)
GA10.km3$withinss
wcls.matrix(clust = GA10.km10)
wcls.matrix(clust = GA10.km10,data = GA10@population)
wcls.matrix(clust = GA10.km10$cluster,data = GA10@population)
wcls.matrix(clust = GA10.km10$cluster, data = GA10@population, cluster.center = GA10.km10$centers)
wcls.matrix(clust = GA10.km3$cluster, data = GA10@population, cluster.center = GA10.km3$centers)
wcls.matrix(data = GA10@population,clust = GA10.km3,cluster.center = GA10.km3)
wcls.matrix(data = GA10@population,clust = GA10.km3$cluster,cluster.center = GA10.km3$centers)
GA10.km3$cluste
GA10.km3$cluster
GA10.km3$centers
wcls.matrix(data = GA10@population, clust = as.integer(GA10.km3$cluster), cluster.center = GA10.km3$centers)
wcls.matrix( GA10@population,  as.integer(GA10.km3$cluster),  GA10.km3$centers)
wcls.matrix(GA10@population, vect, center)
vect <- as.integer(GA10.km3$cluster)
cls.attr <- cls.attrib(GA10@population, vect)
center<-cls.attr$cluster.center
wcls.matrix(GA10@population, vect, center)
clust = sum = sum(diag(w))
w<-wcls.matrix(data = GA10@population,clust = GA10.km3$cluster,cluster.center = GA10.km3$centers)
sum = sum(diag(w))
ss = sum(diag(w))
ss
b<-bcls.matrix(data = GA10@population, clust = GA10.km3$cluster, cluster.center = GA10.km3$centers)
b <- bcls.matrix(data = GA10@population, clust = GA10.km3$cluster, cluster.center = GA10.km3$centers)
b <- bcls.matrix(mean = GA10.km3$cluster.mean, clust = GA10.km3$cluster, cluster.center = GA10.km3$centers)
b <- bcls.matrix(mean = GA10.km3$withinss, clust = GA10.km3$cluster, cluster.center = GA10.km3$centers)
ss <- sum(diag(w))
ss
v.pred <- as.integer(GA10.kmed3$clustering) cls.attr <- cls.attrib(GA10@population, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(GA10@population, v.pred, center) B.matrix <- bcls.matrix(center, size, mean)
sum(diag(B.matrix)) / sum(diag(W.matrix))
plot(GA10@population, col = GA10.km10$centers)
v.pred <- as.integer(GA10.kmed6$clustering) cls.attr <- cls.attrib(GA10@population, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(GA10@population, v.pred, center) B.matrix <- bcls.matrix(center, size, mean)
sum(diag(B.matrix)) / sum(diag(W.matrix))
v.pred <- as.integer(GA10.kmed10$clustering) cls.attr <- cls.attrib(GA10@population, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(GA10@population, v.pred, center) B.matrix <- bcls.matrix(center, size, mean) sum(diag(B.matrix)) / sum(diag(W.matrix))
v.pred <- as.integer(GA30.kmed10$clustering) cls.attr <- cls.attrib(GA30@population, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(GA30@population, v.pred, center) B.matrix <- bcls.matrix(center, size, mean) sum(diag(B.matrix)) / sum(diag(W.matrix))
v.pred <- as.integer(GA50.kmed10$clustering) cls.attr <- cls.attrib(GA50@population, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(GA50@population, v.pred, center) B.matrix <- bcls.matrix(center, size, mean) sum(diag(B.matrix)) / sum(diag(W.matrix))
B_W <- function(pop, gpam) { v.pred <- as.integer(gpam) cls.attr <- cls.attrib(pop, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(pop, v.pred, center) B.matrix <- bcls.matrix(center, size, mean) sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W(GA50@population,GA50.kmed10)
B_W = function(pop, gpam) { v.pred <- as.integer(gpam) cls.attr <- cls.attrib(pop, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(pop, v.pred, center) B.matrix <- bcls.matrix(center, size, mean) sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W(GA50@population,GA50.kmed10)
ssss <- function(pp) { summary(pp) }
ssss(GA50@population)
GA50.kmed10
summary(GA50.kmed10)
summary(GA50.kmed10)
ssss(GA50.kmed10)
B_W = function(pop, gpam) { v.pred <- as.integer(gpam$clustering) cls.attr <- cls.attrib(pop, v.pred) center <- cls.attr$cluster.center size <- cls.attr$cluster.size mean <- cls.attr$mean W.matrix <- wcls.matrix(pop, v.pred, center) B.matrix <- bcls.matrix(center, size, mean) sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W(GA50@population, GA50.kmed10)
summary(GA10.kmed10)
summary(GA10.kmed3)
summary(GA10.kmed6)
summary(GA50.kmed6)
summary(GA10.kmed6)
summary(GA30.kmed6)
summary(GA30.kmed10)
summary(GA10.kmed3)
summary(GA10.kmed10)
B_W(GA50@population, GA50.hcl.avr)
B_W(GA50@population, GA50.km10)
B_W(GA50@population, GA50.db)
B_W(GA50@population, GA50.km10)
GA50.km10$cluster
GA50.km10$cluster[1]
GA50.km10
GA50.km10[1]
GA50.km10[2]
GA50.km10[3]
GA50.km10[4]
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$centers)
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$withinss)
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$tot.withinss)
summary(GA10.agn.ave)
GA10.agn.ave$ac
GA50.km10[2,1]
GA50.km10[2]
GA50.km10[2][1,]
GA50.km10[2][,1]
GA50.km10[2]
GA50.km10$centers[1]
GA50.km10$centers[1,]
cec2013(8, GA50.km10$centers[1,])
GA10@bestSol
GA10.km10$cluster
GA10.km10$cluster[1]
GA10.km10$cluster[1,]
GA10.km10$cluster[1]
GA10.km10[1]
summary(GA10.km10)
summary(GA10.km10)
summary(GA10.kmed10)
summary(GA10.km10)
GA10.km10$withinss
summary(GA10.kmed10)
summary(GA10.hcl.avr)
summary(GA10.km10)
GA10.km10
GA10.kmed10
GA10.hcl.avr
GA10.agn.cmpl
GA10.agn.ave <- agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "average") GA10.agn.sgl <- agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "single") GA10.agn.cmpl <- agnes(GA10@population, diss = FALSE, metric = "euclidean", method = "complete")
GA10.agn.cmpl
GA10.hcl.avr
summasty(GA10.hcl.avr)
summary(GA10.hcl.avr)
GA10.hcl.avr$merge
GA10.hcl.avr$dist.method
GA10.hcl.avr$height
GA10.hcl.avr
plot(GA10.hcl.avr)
GA10.db
GA10.db$cluster
GA10.hcl.avr$labels
GA10.hcl.avr$call
GA10.db
GA10.db$cluster
GA10.db
GA10.km3
GA10.km3$centers
GA10.km3$withinss
GA10.km3$iter
GA10.km3$totss
GA10.km3$tot.withinss
GA10.km3$cluster
srednia_kmean <- function(kmean) { for (i in kmean$cluster)     print(5+5) }
srednia_kmean(GA10.km10)
GA10.km3$cluster
GA10.km3$centers
GA10.km3$betweenss
GA10.km3$size
GA10.km3$iter
GA10.km3
GA10.km3$centers
cec2013(8, GA10.km10$centers, GA10.km3$centers)
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA10.km3$centers)
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km3$centers)
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$centers)
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$centers[1,])
GA10.km3$size
GA10.km3$iter
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$centers[4,])
GA50.km10$centers
GA50.km10$centers
GA50.km10$sieze
GA50.km10$size
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50.km10$centers[,1])
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50@bestSol)
GA50@bestSol
GA50 <- ga(type = "real-valued", fitness = fx, min = rep(-100, 50), max = rep(100, 50), popSize = 500, seed = 1234, monitor = NULL, maxiter = 500, pmutation = 0.1)
GA50@bestSol
GA50@bestSol$list()
GA50@bestSol.list()
GA50@fitness
GA50@elitism
GA50@ call
GA50@nBits
GA50@solution
bcls.matrix(GA50.km10$centers, GA50.km10$size, GA50@solution)
as.vector(GA50@solution)
bcls.matrix(GA50.km10$centers, GA50.km10$size, as.vector(GA50@solution))
GA50@max
size(GA50@max)
sizeDiss(GA50@max)
sizeDiss(as.vector(GA50@max))
GA10@popSize
GA10@population
GA10@population[100,]
GA10@population[100,] + GA10@population[99,]
GA10@population[100,] / 5
srednia_kmean(GA10,10)
srednia_kmean <- function(GA,GA.size) {     sr <- rep(GA.size, 0) for (i in GA@popSize)     sr <- sr + GA@pop[i,] sr <- sr / GA.size     return(sr) }
srednia_kmean(GA10,10)
srednia_kmean <- function(GA, GA.size) {     sr <- rep(GA.size, 0) for (i in GA@popSize)     sr <- sr + GA@population[i,] sr <- sr / GA.size     return(sr) }
srednia_kmean(GA10,10)
rep(10,0> rep(10,0))
rep(10,0)
rep(0,10)
srednia_kmean <- function(GA, GA.size) {     sr <- rep(0,GA.size) for (i in GA@popSize)     sr <- sr + GA@population[i,] sr <- sr / GA.size     return(sr) }
srednia_kmean(GA10,10)
bcls.matrix(GA10.km10$centers, GA10.km10$size, srednia_kmean(GA10, 10)))
bcls.matrix(GA10.km10$centers, GA10.km10$size, srednia_kmean(GA10, 10))
as.integer(GA10.km3$cluster)
B_W_pam = function(pop, gKmean,GAx,GAx.size) {     v.pred <- as.integer(gKmean$cluster)     W.matrix <- wcls.matrix(pop, v.pred, gKmean$center)     B.matrix <- bcls.matrix(gKmean$centers, gKmean$size, srednia_kmean(GAx, GAx.size))     sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_kmean = function(pop, gKmean,GAx,GAx.size) {     v.pred <- as.integer(gKmean$cluster)     W.matrix <- wcls.matrix(pop, v.pred, gKmean$center)     B.matrix <- bcls.matrix(gKmean$centers, gKmean$size, srednia_kmean(GAx, GAx.size))     sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_pam = function(pop, gpam) {     v.pred <- as.integer(gpam$clustering)     cls.attr <- cls.attrib(pop, v.pred)     center <- cls.attr$cluster.center     size <- cls.attr$cluster.size     mean <- cls.attr$mean     W.matrix <- wcls.matrix(pop, v.pred, center)     B.matrix <- bcls.matrix(center, size, mean)     sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_kmean(GA10@population,GA10.km3,GA10,10)
dis2 <- dist(GA30.km3) ^ 2 sil2 <- silhouette(GA30.km3$cluster, dis2)
>dis2 <- dist(GA30.km3) ^ 2
dis2 <- dist(GA30.km3) ^ 2
GA30.km3
GA30.km3 <- kmeans(GA30@population, 3, iter.max = 100, nstart = 10)
GA30.km3
dis2 <- dist(GA30.km3) ^ 2> dis2 <- dist(GA30.km3) ^ 2
dis2 <- dist(GA30.km3$cluster) ^ 2> dis2 <- dist(GA30.km3) ^ 2> dis2 <- dist(GA30.km3$cluster) ^ 2> dis2 <- dist(GA30.km3) ^ 2
dis2 <- dist(GA30@po) ^ 2> dis2 <- dist(GA30.km3) ^ 2> dis2 <- dist(GA30.km3$cluster) ^ 2> dis2 <- dist(GA30.km3) ^ 2
dis2 <- dist(GA30@population) ^ 2
silhouette(GA30.km3$cluster, dis2)
dis2 <- dist(GA30.km3$cluster> dis2 <- dist(GA30.km3$cluster) ^ 2) ^ 2
 dis2 <- dist(GA30.km3$cluster) ^ 2
silhouette(GA30.km3$cluster, dis2)
silhouette(GA30@po, dis2)
silhouette(GA30@population, dis2)> silhouette(GA30@population, dis2)
silhouette(GA30.km3> silhouette(GA30.km3, dis2)> silhouette(GA30@population, dis2), dis2)> silhouette(GA30@population, dis2)
silhouette(GA30.km3, dis2)
GA
GA10.db$cluster
GA10.db
GA10.db@ cluster
plot(ga)
plot(GA10.db)
summary(GA10.db)
GA
GA10.db$isseed
pmin(5:1, pi)
min(5:1, pi)
min(5:1)
max(5:1)
sizeDiss(as.array(db$cluster))
sizeDiss(as.array(GA10.db$cluster))
sizeDiss(GA10.db$cluster)
GA10.db$cluster
length(GA10.db$cluster)
length(GA10@max)
sil3 <- silhouette(GA30.km3$cluster, dist(GA30@population))
si.sum <- summary(sil3)
si.sum$clus.avg.widths
si.sum$avg.width
si.sum
silhouette_kmean <- function(gkmean, GAx) { # Silhouette coefficient of observations sil3 <- silhouette(gkmean$cluster, dist(GAx@population)) # Summary of silhouette analysis si.sum <- summary(sil3) # Average silhouette width of each cluster si.sum$clus.avg.widths #The total average(mean of all individual silhouette widths) si.sum$avg.width # The size of each clusters }
silhouette_kmean(GA10.km10,GA10)
silhouette_kmean <- function(gkmean, GAx) { # Silhouette coefficient of observations sil3 <- silhouette(gkmean$cluster, dist(GAx@population)) # Summary of silhouette analysis si.sum <- summary(sil3) # Average silhouette width of each cluster si.sum$clus.avg.widths #The total average(mean of all individual silhouette widths) si.sum$avg.width     return(si.sum$clus.avg.widths, si.sum$avg.width) # The size of each clusters }
silhouette_kmean(GA10.km10,GA10)
silhouette_kmean <- function(gkmean, GAx) { # Silhouette coefficient of observations sil3 <- silhouette(gkmean$cluster, dist(GAx@population)) # Summary of silhouette analysis si.sum <- summary(sil3) # Average silhouette width of each cluster si.sum$clus.avg.widths #The total average(mean of all individual silhouette widths) si.sum$avg.width     return(si.sum$clus.avg.widths) # The size of each clusters }
silhouette_kmean(GA10.km10,GA10)
silhouette_kmean <- function(gkmean, GAx) { # Silhouette coefficient of observations sil3 <- silhouette(gkmean$cluster, dist(GAx@population)) # Summary of silhouette analysis si.sum <- summary(sil3) # Average silhouette width of each cluster si.sum$clus.avg.widths #The total average(mean of all individual silhouette widths) si.sum$avg.width # The size of each clusters }
silhouette_kmean(GA10.km10,GA10)
GA10.db$cluster[1]
GA10.db$cluster
c(1:3)[1]
k<-0
k
k 
k+1
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i + 1]]+1 }
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i + 1]] <- n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
B_W_dbscam(GA10.db,GA10)
GA10.db
pri
print(GA10.db)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i + 1]] <- n.in.clust[db$cluster[i + 1]] + 1     n.clust }
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i + 1]] <- n.in.clust[db$cluster[i + 1]] + 1     n.clust }
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i + 1]] <- n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
B_W_dbscam(GA10.db,GA10)
GA10.db$cluster
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         n.in.clust[db$cluster[i]+1] <- n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
silhouette_kmean(GA10.km10,GA10)
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)         print(i)       #  n.in.clust[db$cluster[i]+1] <- n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in length(db$cluster))         print(i)       #  n.in.clust[db$cluster[i]+1] <- n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
B_W_dbscam(GA10.db,GA10)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in length(db$cluster))         print(i)       #  n.in.clust[db$cluster[i]+1] <- n.in.clust[db$cluster[i + 1]] + 1     n.in.clust }
B_W_dbscam(GA10.db,GA10)
length(GA10.db$cluster)
B_W_dbscam <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)        n.in.clust[i+1] <- n.in.clust[i+1] + 1     n.in.clust }
length(GA10.db$cluster)
B_W_dbscam(GA10.db,GA10)
GA10.db$cluster
GA10.db
as.integer(GA10.db$cluster)
as.integer(GA10.km3$cluster)
colMeans(GA10@population[GA10.db$cluster == 0,])
colMeans(GA10@population[GA10.db$cluster == 1,])
colMeans(GA10@population[GA10.db$cluster == 2,])
colMeans(GA10@population[GA10.db$cluster == 3,])
GA10.db
silhouette_kmean(GA10.kmed3, GA10)
silhouette_kmean(GA10.db, GA10)
silhouette_kmean(GA10.agn.sgl, GA10)
silhouette_kmean(GA10.agn.cmpl, GA10)
silhouette_kmean(GA10.hcl.avr, GA10)
silhouette_kmean(GA10.km10, GA10)
silhouette_kmean(GA10.km3, GA10)
silhouette_kmean(GA10.km6, GA10)
GA10.km20 <- kmeans(GA10@population, 20, iter.max = 100, nstart = 30)
silhouette_kmean(GA10.km20, GA10)
GA10.km30 <- kmeans(GA10@population, 30, iter.max = 100, nstart = 30)
silhouette_kmean(GA10.km30, GA10)
B_W_dbscam_size <- function(db,GAx) {     n.clust <- max(db$cluster+1)     n.in.clust<-rep(0,n.clust)     for (i in db$cluster)        n.in.clust[i+1] <- n.in.clust[i+1] + 1     return(n.in.clust) } colMeans(GA10@population[GA10.db$cluster == 3,])
 max(GA10.db$cluster + 1)
 max(GA10.db$cluster )
B_W_dbscam_center < function(db, GAx) {     n.clust <- max(db$cluster)     for (i in n.clust)     colMeans(GAx@population[db$cluster == i,]) }
B_W_dbscam_center <- function(db, GAx) {     n.clust <- max(db$cluster)     for (i in n.clust)     colMeans(GAx@population[db$cluster == i,]) }
B_W_dbscam_center(GA10.db,GA10)
B_W_dbscam_center <- function(db, GAx) {     n.clust <- max(db$cluster)     for (i in n.clust)         colMeans(GAx@population[db$cluster == i,])     colMeans(GAx@population[db$cluster == n.clust,]) }
B_W_dbscam_center(GA10.db,GA10)
colMeans(GA10@population[GA10.db$cluster == 2,])le
length( colMeans(GA10@population[GA10.db$cluster == 2,]))
aaa[2,2]
A=matrix(nrow = 2,ncol = 3)
A
A[1,]=c(1:3)
A
B_W_dbscam_center <- function(db, GAx) {     n.clust <- max(db$cluster)     m.maatrix <- length(colMeans(GA10@population[GA10.db$cluster == n.clust,]))     A=matrix(nrow=n.clust,ncol=m.maatrix)     for (i in n.clust)        A[i,]= colMeans(GAx@population[db$cluster == i,])     return(A) }
B_W_dbscam_center(GA10.db,GA10)
B_W_dbscam_center <- function(db, GAx) {     n.clust <- max(db$cluster)     m.maatrix <- length(colMeans(GA10@population[GA10.db$cluster == n.clust,]))     A=matrix(nrow=n.clust,ncol=m.maatrix)     for (i in c(1:n.clust)        A[i,]= colMeans(GAx@population[db$cluster == i,])     return(A) }
B_W_dbscam_center <- function(db, GAx) {     n.clust <- max(db$cluster)     m.maatrix <- length(colMeans(GA10@population[GA10.db$cluster == n.clust,]))     A=matrix(nrow=n.clust,ncol=m.maatrix)     for (i in c(1:n.clust))        A[i,]= colMeans(GAx@population[db$cluster == i,])     return(A) }
B_W_dbscam_center(GA10.db,GA10)
B_GA10.db$cluster
GA10.db$cluster
as.integer(GA10.km10$cluster)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(db,GAx))     B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db,GA10,10)
as.integer(GA10.db$cluster)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(db,GAx))    # B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    # sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam_center(GA10.db, GA10)
B_W_dbscam_center <- function(db, GAx) { #trzeba uwzglednic szum bo WCV wymaga :(     n.clust <- max(db$cluster+1)     m.maatrix <- length(colMeans(GA10@population[GA10.db$cluster == n.clust-1,]))     A = matrix(nrow = n.clust, ncol = m.maatrix)     for (i in c(0:n.clust-1))         A[i,] = colMeans(GAx@population[db$cluster == i,])     return(A) }
B_W_dbscam_center(GA10.db, GA10)
B_W_dbscam_center <- function(db, GAx) { #trzeba uwzglednic szum bo WCV wymaga :(     n.clust <- max(db$cluster+1)     m.maatrix <- length(colMeans(GA10@population[GA10.db$cluster == n.clust-1,]))     A = matrix(nrow = n.clust, ncol = m.maatrix)     for (i in c(0:n.clust-1))         A[i+1,] = colMeans(GAx@population[db$cluster == i,])     return(A) }
B_W_dbscam_center(GA10.db, GA10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(db,GAx))     B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(db,GAx))     B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    sum(diag(B.matrix)) / sum(diag(W.matrix)) }
GA10.db$cluster
GA10.km3$cluster
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, db$cluster)     B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
as.integer(GA10.db$cluster)
GA10.db$cluster
B_W_dbscam(GA10.db, GA10, 10)
B_W_kmean(GA10.db, GA10, 10)
B_W_kmean(GA10@population,GA10.km3,GA10,10)
GA10.km3$center
B_W_dbscam_center(GA10.db, GA10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, as.vector(db$cluster))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
as.array(B_W_dbscam_center(GA10.db, GA10))
as.vector(B_W_dbscam_center(GA10.db, GA10))
as.list(GA10.db$cluster)
as.list.Date(GA10.db$cluster)
as.list.data.frame(GA10.db$cluster)
as.data.frame.array(GA10.db$cluster)
as.data.frame(GA10.db$cluster)
as.data(GA10.db$cluster)
as.data.frame.vector(GA10.db$cluster)
as.array.default(GA10.db$cluster)
as.matrix.data.frame(GA10.db$cluster)
as.matrix.default(GA10.db$cluster)
as.matrix.noquote(GA10.db$cluster)
as.matrix.POSIXlt(GA10.db$cluster)
as.data.frame.array(GA10.db$cluster)
as.data.frame.matrix(GA10.db$cluster)
as.data.frame.model(GA10.db$cluster)
as.data.frame.factor$cluster)
as.data.frame.integer$cluster)
as.in$cluster)
as.integer$cluster)
as.data.frame.model.matrix(GA10$cluster)
as.data.frame.model.matrix(GA10.db$cluster)
as.data.frame.model(GA10.db$cluster)
as.data.frame.matrix(GA10.db$cluster)
as.array(GA10.db$cluster)
GA10.db$cluster
as.vector(B_W_dbscam_center(GA10.db, GA10))
(B_W_dbscam_center(GA10.db, GA10))[1:3,]
(B_W_dbscam_center(GA10.db, GA10))[1,]
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, db$cluster[1:3,])     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
as.matrix(B_W_dbscam_center(GA10.db, GA10))
as.integer(B_W_dbscam_center(GA10.db, GA10))
as.(B_W_dbscam_center(GA10.db, GA10))
as.array.default(B_W_dbscam_center(GA10.db, GA10))
as.data.frame.array(B_W_dbscam_center(GA10.db, GA10))
GA10.km3$center
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, as.data.frame.array( db$cluster))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
as.data.frame.array(B_W_dbscam_center(GA10.db, GA10))
as.data.frame.vector(B_W_dbscam_center(GA10.db, GA10))
as.data.frame.Date(B_W_dbscam_center(GA10.db, GA10))
as.data.frame.(B_W_dbscam_center(GA10.db, GA10))
as.data.frame.ts(B_W_dbscam_center(GA10.db, GA10))
    W.matrix <- wcls.matrix(GAx@population, v.pred, as.data.frame.ts( db$cluster))
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, as.data.frame.ts( db$cluster))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
as.data.frame.numeric_version(B_W_dbscam_center(GA10.db, GA10))
as.data.frame(B_W_dbscam_center(GA10.db, GA10))
as.data(B_W_dbscam_center(GA10.db, GA10))
as.dist(B_W_dbscam_center(GA10.db, GA10))
as.vector.factor(B_W_dbscam_center(GA10.db, GA10))
as.vector(B_W_dbscam_center(GA10.db, GA10))
GA10.km3$center
l <- list(c(1, 2, 3), c(4, 5, 6))> l <- list(c(1, 2, 3), c(4, 5, 6))
l <- list(c(1, 2, 3), c(4, 5, 6))
l
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
library("clv", lib.loc="C:/Users/konra/OneDrive/Dokumenty/R/win-library/3.3")
rtvs::debug_source("C:/Users/konra/Source/Repos/MOW-AE/Projekt MOW/Projekt MOW/script.R")
(B_W_dbscam_center(GA10.db, GA10))
typeof(get(GA10.km3$center))
typeof((GA10.km3$center))
get(GA10.km3$center)
typeof(GA10.km3$center[])
typeof(GA10.km3$center[,])
GA10.km3$center[1,]
GA10.km3$center[3,]
GA10.km3$center[4,]
GA10.km3$center
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred, as.data.frame.ts( db$cluster))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_kmean(GA10@population, GA10.km3, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred,  db$cluster))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) } B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     W.matrix <- wcls.matrix(GAx@population, v.pred,  db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
A<-c(0:3)
A
A+1
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     v.pred+1     W.matrix <- wcls.matrix(GAx@population, v.pred,  db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    #sum(diag(B.matrix)) / sum(diag(W.matrix)) }
B_W_dbscam(GA10.db, GA10, 10)
A<-as.integer(GA10.db$cluster)
A
A+1
(B_W_dbscam_center(GA10.db, GA10))
GA10.km3$center
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     v.pred+1    # W.matrix <- wcls.matrix(GAx@population, v.pred,  db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     v.pred<-v.pred+1    # W.matrix <- wcls.matrix(GAx@population, v.pred,  db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     v.pred<-v.pred+1     W.matrix <- wcls.matrix(GAx@population, v.pred,  db$cluster)     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster)     v.pred<-v.pred+1     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(GA10.db, GA10))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster+1)     #W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(GA10.db, GA10))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster+1)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(GA10.db, GA10))     #B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster+1)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(GA10.db, GA10))     B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))     #sum(diag(B.matrix)) / sum(diag(W.matrix))     return(v.pred) }
B_W_dbscam(GA10.db, GA10, 10)
cluster(GA10.db)$size
Cluster(GA10.db)$size
cluster.size()
cluster
B_W_dbscam(GA10.db, GA10, 10)
GA10.km3$center
B_W_dbscam_size(GA10.db, GA10)
B_W_dbscam_size <- function(db, GAx) {     n.clust <- max(db$cluster + 1)     n.in.clust <- rep(0, n.clust)     for (i in db$cluster)         n.in.clust[i + 1] <- n.in.clust[i + 1] + 1     return(n.in.clust[1:n.clust]) #zwraca z szukem {1:n}, bez {2:n} }
B_W_dbscam_size(GA10.db, GA10)
B_W_dbscam(GA10.db, GA10, 10)
B_W_dbscam = function(db, GAx, GAx.size) {     v.pred <- as.integer(db$cluster+1)     W.matrix <- wcls.matrix(GAx@population, v.pred, B_W_dbscam_center(GA10.db, GA10))     B.matrix <- bcls.matrix(B_W_dbscam_center(db, GAx), B_W_dbscam_size(db,GAx), srednia_kmean(GAx, GAx.size))    return( sum(diag(B.matrix)) / sum(diag(W.matrix))) }
B_W_dbscam(GA10.db, GA10, 10)
